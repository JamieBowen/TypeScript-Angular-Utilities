'use strict';
var number_service_1 = require('../number/number.service');
exports.factoryName = 'fileSizeFactory';
var FileSizeService = (function () {
    function FileSizeService(numberUtility, bytes) {
        this.BYTES_PER_GB = 1073741824;
        this.BYTES_PER_MB = 1048576;
        this.BYTES_PER_KB = 1024;
        this.bytes = bytes;
        if (bytes >= this.BYTES_PER_GB) {
            this.isGB = true;
            this.GB = bytes / this.BYTES_PER_GB;
            this.GB = numberUtility.preciseRound(this.GB, 1);
        }
        else {
            this.isGB = false;
            if (bytes >= this.BYTES_PER_MB) {
                this.isMB = true;
                this.MB = bytes / this.BYTES_PER_MB;
                this.MB = numberUtility.preciseRound(this.MB, 1);
            }
            else {
                this.isMB = false;
                if (bytes >= this.BYTES_PER_KB) {
                    this.isKB = true;
                    this.KB = bytes / this.BYTES_PER_KB;
                    this.KB = numberUtility.preciseRound(this.KB, 1);
                }
                else {
                    this.isKB = false;
                }
            }
        }
        this.bytes = Math.round(this.bytes);
    }
    FileSizeService.prototype.display = function () {
        if (this.isGB) {
            return this.GB + ' GB';
        }
        else if (this.isMB) {
            return this.MB + ' MB';
        }
        else if (this.isKB) {
            return this.KB + ' KB';
        }
        else {
            return this.bytes + ' bytes';
        }
    };
    return FileSizeService;
}());
fileSizeFactory.$inject = [number_service_1.serviceName];
function fileSizeFactory(numberUtility) {
    'use strict';
    return {
        getInstance: function (bytes) {
            return new FileSizeService(numberUtility, bytes);
        },
    };
}
exports.fileSizeFactory = fileSizeFactory;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZVNpemUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImZpbGVTaXplLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDO0FBRWIsK0JBQWlFLDBCQUEwQixDQUFDLENBQUE7QUFFakYsbUJBQVcsR0FBVyxpQkFBaUIsQ0FBQztBQU1uRDtJQWdCQyx5QkFBWSxhQUE2QixFQUFFLEtBQWE7UUFmeEQsaUJBQVksR0FBVyxVQUFVLENBQUM7UUFDbEMsaUJBQVksR0FBVyxPQUFPLENBQUM7UUFDL0IsaUJBQVksR0FBVyxJQUFJLENBQUM7UUFjM0IsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFFbkIsRUFBRSxDQUFDLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO1lBQ2hDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1lBQ2pCLElBQUksQ0FBQyxFQUFFLEdBQUcsS0FBSyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUM7WUFDcEMsSUFBSSxDQUFDLEVBQUUsR0FBRyxhQUFhLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDbEQsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ1AsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUM7WUFFbEIsRUFBRSxDQUFDLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO2dCQUNoQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztnQkFDakIsSUFBSSxDQUFDLEVBQUUsR0FBRyxLQUFLLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQztnQkFDcEMsSUFBSSxDQUFDLEVBQUUsR0FBRyxhQUFhLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDbEQsQ0FBQztZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNQLElBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDO2dCQUVsQixFQUFFLENBQUMsQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7b0JBQ2hDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO29CQUNqQixJQUFJLENBQUMsRUFBRSxHQUFHLEtBQUssR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDO29CQUNwQyxJQUFJLENBQUMsRUFBRSxHQUFHLGFBQWEsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDbEQsQ0FBQztnQkFBQyxJQUFJLENBQUMsQ0FBQztvQkFDUCxJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQztnQkFDbkIsQ0FBQztZQUNGLENBQUM7UUFDRixDQUFDO1FBRUQsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRUQsaUNBQU8sR0FBUDtRQUNDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ2YsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFDO1FBQ3hCLENBQUM7UUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDdEIsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFDO1FBQ3hCLENBQUM7UUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDdEIsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFDO1FBQ3hCLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNQLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQztRQUM5QixDQUFDO0lBQ0YsQ0FBQztJQUNGLHNCQUFDO0FBQUQsQ0FBQyxBQXpERCxJQXlEQztBQU1ELGVBQWUsQ0FBQyxPQUFPLEdBQUcsQ0FBQyw0QkFBaUIsQ0FBQyxDQUFDO0FBQzlDLHlCQUFnQyxhQUE2QjtJQUM1RCxZQUFZLENBQUM7SUFDYixNQUFNLENBQUM7UUFDTixXQUFXLFlBQUMsS0FBYTtZQUN4QixNQUFNLENBQUMsSUFBSSxlQUFlLENBQUMsYUFBYSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ2xELENBQUM7S0FDRCxDQUFDO0FBQ0gsQ0FBQztBQVBlLHVCQUFlLGtCQU85QixDQUFBIn0=